head(test)
test <- getBM(
attributes=c('entrezgene', 'chromosome_name', 'transcript_start', 'transcript_end'),
filters = c('chromosome_name', 'start', 'end' ),
values = with(res.info, list(gsub("chr", "", as.character(chr)), start, end)),
mart = ensembl )
dim(test)
head(test)
dim(res.info)
attributes = listAttributes(ensembl)
head(attributes())
head(attributes
)
attributes
head(res.info)
dim(res.info)
dim(test)
test <- getBM(
attributes=c('hgnc_symbol','ensembl_gene_id', ),
filters = c('chromosome_name', 'start', 'end' ),
values = with(res.info, list(gsub("chr", "", as.character(chr)), start, end)),
mart = ensembl )
test <- getBM(
attributes=c('hgnc_symbol','ensembl_gene_id' ),
filters = c('chromosome_name', 'start', 'end' ),
values = with(res.info, list(gsub("chr", "", as.character(chr)), start, end)),
mart = ensembl )
head(test)
dim(test)
test <- getBM(
attributes=c('hgnc_symbol'),
filters = c('chromosome_name', 'start', 'end' ),
values = with(res.info, list(gsub("chr", "", as.character(chr)), start, end)),
mart = ensembl )
dim(test)
head(test)
require(CAGEr)
load("../Data/intermediate/CAGEobject_twoSamples_PowNom_allSlots.RData")
require(CAGEr)
load("../Data/intermediate/CAGEobject_twoSamples_PowNom_allSlots.RData")
samples <- unname(sampleLabels(myCAGEset))
samples
# packages
require(BSgenome.Drerio.UCSC.danRer7)
require(GenomicRanges)
require(GenomicFeatures)
# GRanges
tc.gr.list <- list()
for ( i in samples ) {
tc <- tagClusters(myCAGEset,
sample = i,
returnInterquantileWidth = TRUE,
qLow = 0.1,
qUp = 0.9)
tc.gr <- GRanges(seqnames = tc$chr,
ranges = IRanges(start = tc$q_0.1, end = tc$q_0.9),
strand = tc$strand,
seqlengths = seqlengths(Drerio))
values(tc.gr) <- cbind(values(tc.gr),tc[,6:9])
tc.gr.list[[i]] <- tc.gr
}
# dan rerio v7
require(AnnotationDbi)
txdb <- makeTxDbFromUCSC("danRer7", "ensGene")
# load txdb
txdb <- loadDb("../Data/provided/txdb_DanRer7.sqlite")
### gene features
# 5' UTR (500bp window around refgene TSS)
promoters <- trim(promoters(txdb, upstream=500, downstream=500))
# 5 kb upstream - 500bp
upstream <- trim(flank(promoters, 5000))
# exons
exons <- exons(txdb)
# introns
introns <- intronsByTranscript(txdb)
# genes
gene <- genes(txdb)
GeneFeatfun <- function(x){
## create identifyer for x
x$tag.id <- paste("tagid_",1:length(x))
## subset for each feature and concatenate
# gene
df <- as.data.frame(subsetByOverlaps(x, gene)); df$feat = "gene"
all <- df
# prom
df <- as.data.frame(subsetByOverlaps(x, promoters)); df$feat = "promoter"
all <- rbind(all, df)
# 5 kb upstream
df <- as.data.frame(subsetByOverlaps(x, upstream)); df$feat = "upstream"
all <- rbind(all, df)
# exons
df <- as.data.frame(subsetByOverlaps(x, exons)); df$feat = "exon"
all <- rbind(all, df)
# introns
df <- as.data.frame(subsetByOverlaps(x, introns)); df$feat = "intron"
all <- rbind(all, df)
## collapse to one per tagid but keep multiple Features:
group <- aggregate(all[, "feat"], by = list(all$tag.id), paste, collapse = ";")
feat_all <- group$x
## give priority to associate one genomic feature per tag.id
group$x[grep("promoter", group$x)] = "promoter"
group$x[grep("upstream", group$x)] = "upstream"
group$x[grep("exon", group$x)] = "exon"
group$x[grep("intron", group$x)] = "intron"
group$y <- feat_all
colnames(group)[2:3] <- c("feat_single", "feat_all")
## merge to x to get all the original data
y <- merge(x, group, by.x = "tag.id", by.y = "Group.1", all.x = TRUE)
y$feat_single[which(is.na(y$feat_single))] = "intergenic"
return(y)
}
tc.gfeat <- lapply(tc.list, GeneFeatfun)
tc.gfeat <- lapply(tc.gr.list, GeneFeatfun)
head(tc.gfeat$zf_512cells)
table(tc.gfeat$zf_512cells$feat_single)
# package
require(ggplot2)
tab <- data.frame(table(tc.gfeat$zf_512cells$feat_single))
tab$perc <- (tab$Freq/sum(tab$Freq))*100
tab$Var1 = factor(x = tab$Var1, levels = c("upstream","promoter","exon","intron","gene","intergenic"))
ggplot(data = tab, aes(x = Var1, y = perc, alpha = Var1)) +
geom_bar(stat = "identity", position = position_dodge(),fill = "forestgreen") +
xlab("Gene Feature") + ylab("TC") + ggtitle("Genomic Features") +
scale_alpha_discrete(range = c(1, 0.3)) +
theme(text = element_text(size=16), panel.background=element_rect(fill = "white", colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1))
tc.list <- list()
for ( i in samples ) {
tc <- tagClusters(myCAGEset,
sample = i,
returnInterquantileWidth = TRUE,
qLow = 0.1,
qUp = 0.9)
tc.list[[i]] <- tc[tc$tpm >= 5,] # threshold
}
plot.tc <- NULL
for(i in 1:length(samples)){
a <- tc.list[[i]][,c("tpm","interquantile_width")]
a$group <- samples[i]
plot.tc <- rbind(plot.tc,a)
}
# density
print( ggplot(plot.tc, aes(x = interquantile_width, fill = group)) +
geom_density(alpha=0.5) +
theme_bw() +
scale_fill_brewer(palette = "Set1") + # only change if samples exceed colours
ggtitle("Density overlay width TC") +
coord_cartesian(xlim = c(0,100)) # only display these coordinates but won't affect data distribution
)
# packages
require(seqPattern)
require(BSgenome.Drerio.UCSC.danRer7)
# make list with GRanges with start and end at dominant CTSS position
tc.gr.domTss.list <- list()
for ( i in samples ) {
tc <- tagClusters(myCAGEset,
sample = i,
returnInterquantileWidth = TRUE,
qLow = 0.1,
qUp = 0.9)
tc.gr <- GRanges(seqnames = tc$chr,
ranges = IRanges(start = tc$dominant_ctss, end = tc$dominant_ctss),
strand = tc$strand,
seqlengths = seqlengths(Drerio))
values(tc.gr) <- cbind(values(tc.gr),tc[,c(8,12)])
tc.gr.domTss.list[[i]] <- tc.gr
}
i = samples[1]
flanking <- promoters(tc.gr.domTss.list[[i]], upstream = 400,downstream = 400)
flanking
idx <- GenomicRanges:::get_out_of_bound_index(flanking)
idx
i <- samples[1]
up <- 400
down <- 400
win <- up + down
flanking <- promoters(tc.gr.domTss.list[[i]], upstream = up,downstream = down)
i <- samples[1]
up <- 400
down <- 400
win <- up + down
flanking <- promoters(tc.gr.domTss.list[[i]], upstream = up,downstream = down)
flanking <- flanking[width(trim(flanking)) == win]
flanking
i <- samples[1]
up <- 400
down <- 400
win <- up + down
flanking <- promoters(tc.gr.domTss.list[[i]], upstream = up,downstream = down)
flanking
zfseq <- getSeq(Drerio, flanking) # from BSgenome.Drerio.UCSC.danRer7
# make index of sharp and broad promoters
sIdx <- zfseq$interquantile_width < 10
flanking
flanking <- flanking[width(trim(flanking)) == win] # win is the window of start and end
zfseq <- getSeq(Drerio, flanking) # from BSgenome.Drerio.UCSC.danRer7
# make index of sharp and broad promoters
sIdx <- zfseq$interquantile_width < 10
# make index of sharp and broad promoters
sIdx <- flanking$interquantile_width < 10
bIdx <- flanking$interquantile_width >= 10
head(sIdx)
par(mfrow = c(1,2), mar = c(4.5,4,1,1))
# sharp
plotPatternOccurrenceAverage(regionsSeq = zfseq[sIdx],
patterns = c("WW", "SS"),
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3", "blue3"),
cex.axis = 0.9 )
i <- samples[1]
up <- 200
down <- 200
win <- up + down
flanking <- promoters(tc.gr.domTss.list[[i]], upstream = up,downstream = down)
flanking <- flanking[width(trim(flanking)) == win] # win is the window of start and end
i <- samples[1]
up <- 400
down <- 400
win <- up + down
flanking <- promoters(tc.gr.domTss.list[[i]], upstream = up,downstream = down)
flanking <- flanking[width(trim(flanking)) == win] # win is the window of start and end
zfseq <- getSeq(Drerio, flanking) # from BSgenome.Drerio.UCSC.danRer7
# make index of sharp and broad promoters
sIdx <- flanking$interquantile_width < 10
bIdx <- flanking$interquantile_width >= 10
par(mfrow = c(1,2), mar = c(4.5,4,1,1))
# sharp
plotPatternOccurrenceAverage(regionsSeq = zfseq[sIdx],
patterns = c("WW", "SS"),
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3", "blue3"),
cex.axis = 0.9 )
i <- samples[1]
up <- 200
down <- 200
win <- up + down
flanking <- promoters(tc.gr.domTss.list[[i]], upstream = up,downstream = down)
flanking <- flanking[width(trim(flanking)) == win] # win is the window of start and end
zfseq <- getSeq(Drerio, flanking) # from BSgenome.Drerio.UCSC.danRer7
# make index of sharp and broad promoters
sIdx <- flanking$interquantile_width < 10
bIdx <- flanking$interquantile_width >= 10
par(mfrow = c(1,2), mar = c(4.5,4,1,1))
# sharp
plotPatternOccurrenceAverage(regionsSeq = zfseq[sIdx],
patterns = c("WW", "SS"),
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3", "blue3"),
cex.axis = 0.9 )
# broad
plotPatternOccurrenceAverage(regionsSeq = zfseq[bIdx],
patterns = c("WW", "SS"),
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3", "blue3"),
cex.axis = 0.9 )
data(TBPpwm)
TBPpwm
plotMotifOccurrenceAverage(regionsSeq = zfseq[sIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3"),
cex.axis = 0.9 )
plotMotifOccurrenceAverage(regionsSeq = zfseq[bIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3"),
cex.axis = 0.9 )
legend("topright",
legend = c("sharp", "broad"),
col = c("red3", "blue3"),
bty = "n",
lwd = 1 )
plotMotifOccurrenceAverage(regionsSeq = zfseq[sIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3"),
cex.axis = 0.9 )
plotMotifOccurrenceAverage(regionsSeq = zfseq[bIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3"),
cex.axis = 0.9 )
legend("topright",
legend = c("sharp", "broad"),
col = c("red3", "blue3"),
bty = "n",
lwd = 1 )
plotMotifOccurrenceAverage(regionsSeq = zfseq[sIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3"),
cex.axis = 0.9 )
plotMotifOccurrenceAverage(regionsSeq = zfseq[bIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("blue3"), add = TRUE )
legend("topright",
legend = c("sharp", "broad"),
col = c("red3", "blue3"),
bty = "n",
lwd = 1 )
plotMotifOccurrenceAverage(regionsSeq = zfseq[sIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3"),
cex.axis = 0.9 )
plotMotifOccurrenceAverage(regionsSeq = zfseq[sIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3"),
cex.axis = 0.9 )
plotMotifOccurrenceAverage(regionsSeq = zfseq[bIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("blue3"), add = TRUE )
legend("topright",
legend = c("sharp", "broad"),
col = c("red3", "blue3"),
bty = "n",
lwd = 1 )
plotMotifOccurrenceAverage(regionsSeq = zfseq[sIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3"),
cex.axis = 0.9 )
plotMotifOccurrenceAverage(regionsSeq = zfseq[sIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("red3"),
cex.axis = 0.9 )
plotMotifOccurrenceAverage(regionsSeq = zfseq[bIdx],
motifPWM = TBPpwm,
minScore = "90%",
flankUp = up,
flankDown = down,
smoothingWindow = 3,
color = c("blue3"), add = TRUE )
legend("topright",
legend = c("sharp", "broad"),
col = c("red3", "blue3"),
bty = "n",
lwd = 1 )
# packages
require(heatmaps)
require(BSgenome.Drerio.UCSC.danRer7)
i <- samples[1]
up <- 400
down <- 400
win <- up + down
flanking <- promoters(tc.gr.domTss.list[[i]], upstream = up,downstream = down)
flanking <- flanking[width(trim(flanking)) == win] # win is the window of start and end
zfseq <- getSeq(Drerio, flanking) # from BSgenome.Drerio.UCSC.danRe
# packages
require(heatmaps)
require(BSgenome.Drerio.UCSC.danRer7)
i <- samples[1]
up <- 400
down <- 400
win <- up + down
flanking <- promoters(tc.gr.domTss.list[[i]], upstream = up,downstream = down)
flanking <- flanking[width(trim(flanking)) == win] # win is the window of start and end
zfseq <- getSeq(Drerio, flanking) # from BSgenome.Drerio.UCSC.danRe
t = order(flanking$interquantile_width) # the order
t = order(flanking$interquantile_width) # the order
fa = zfseq[t] # zf sequences reordered
SmoothPatternHM = function(seq, pattern, ...) {
hm = PatternHeatmap(seq, pattern, ...)
smooth(hm, output.size=c(250, 1500))
}
coords = c(-400,400) # coordinates window
hm_list = list(
ta=SmoothPatternHM(fa, "TA", coords=coords),
cg=SmoothPatternHM(fa, "CG", coords=coords),
ww=SmoothPatternHM(fa, "WW", coords=coords),
ss=SmoothPatternHM(fa, "SS", coords=coords)
)
par(mfrow=c(1,2))
plotHeatmap(hm_list$ta, options=upperOpts)
SmoothPatternHM = function(seq, pattern, ...) {
hm = PatternHeatmap(seq, pattern, ...)
smooth(hm, output.size=c(250, 1500))
}
coords = c(-400,400) # coordinates window
hm_list = list(
ta=SmoothPatternHM(fa, "TA", coords=coords),
cg=SmoothPatternHM(fa, "CG", coords=coords),
ww=SmoothPatternHM(fa, "WW", coords=coords),
ss=SmoothPatternHM(fa, "SS", coords=coords)
)
upperOpts = heatmapOptions(
label.col="white",
x.ticks=FALSE )
upperOpts = heatmapOptions(
label.col="white",
x.ticks=FALSE )
par(mfrow=c(1,2))
plotHeatmap(hm_list$ta, options=upperOpts)
plotHeatmap(hm_list$cg, options=upperOpts)
SmoothPatternHM = function(seq, pattern, ...) {
hm = PatternHeatmap(seq, pattern, ...)
smooth(hm, output.size=c(750, 1500))
}
coords = c(-400,400) # coordinates window
hm_list = list(
ta=SmoothPatternHM(fa, "TA", coords=coords),
cg=SmoothPatternHM(fa, "CG", coords=coords),
ww=SmoothPatternHM(fa, "WW", coords=coords),
ss=SmoothPatternHM(fa, "SS", coords=coords)
)
par(mfrow=c(1,2))
plotHeatmap(hm_list$ta, options=upperOpts)
plotHeatmap(hm_list$cg, options=upperOpts)
SmoothPatternHM = function(seq, pattern, ...) {
hm = PatternHeatmap(seq, pattern, ...)
smooth(hm, output.size=c(1600, 1500))
}
coords = c(-400,400) # coordinates window
hm_list = list(
ta=SmoothPatternHM(fa, "TA", coords=coords),
cg=SmoothPatternHM(fa, "CG", coords=coords),
ww=SmoothPatternHM(fa, "WW", coords=coords),
ss=SmoothPatternHM(fa, "SS", coords=coords)
)
par(mfrow=c(1,2))
plotHeatmap(hm_list$ta, options=upperOpts)
plotHeatmap(hm_list$cg, options=upperOpts)
plotHeatmap(hm_list$ww, options=lowerOpts)
upperOpts = heatmapOptions(
label.col="white",
x.ticks=FALSE )
lowerOpts = heatmapOptions(
cex.axis=1.5 )
par(mfrow=c(1,2))
plotHeatmap(hm_list$ta, options=upperOpts)
plotHeatmap(hm_list$cg, options=upperOpts)
plotHeatmap(hm_list$ww, options=lowerOpts)
plotHeatmap(hm_list$ss, options=lowerOpts)
mtext("interquantile \nwidth", side=1, line=3, cex=1.2)
upperOpts = heatmapOptions(
label.col="white",
x.ticks=FALSE )
lowerOpts = heatmapOptions(
cex.axis=1.5 )
par(mfrow=c(1,2))
plotHeatmap(hm_list$ta, options=upperOpts)
plotHeatmap(hm_list$cg, options=upperOpts)
plotHeatmap(hm_list$ww, options=lowerOpts)
plotHeatmap(hm_list$ss, options=lowerOpts)
mtext("interquantile \nwidth", side=1, line=3, cex=1.2)
browseVignettes("DESeq2")
res.info <- read.table("../Data/intermediate/DiffExpression_Consensus_4Samples.txt", head = TRUE, sep = "\t")
head(res.info)
bed <- cbind(res.info[,c(1:3,5)],1,res.info[,4])
head(bed)
head(res.info)
signi <- res.info[res.info$pvalue <= 0.05,]
dim(signi)
head(signi)
signi <- res.info[res.info$pvalue <= 0.01 & res.info$log2FoldChange < 0,]
dim(signi)
signi <- res.info[res.info$pvalue <= 0.01 & res.info$log2FoldChange < 0,]
nrow(signi)
bed <- cbind(signi[ , c(1:3, 5)], 1, sifni[ , 4])
bed <- cbind(signi[ , c(1:3, 5)], 1, signi[ , 4])
write.table(bed,
"../Data/intermediate/DiffExpression_downReg_p0.01.bed",
col.names = FALSE,
row.names = FALSE,
quote = FALSE,
sep = "\t")
head(bed)
