group = "development", sample = as.character(ZebrafishSamples$sample[c(3:4,11:12)] ) )
# Clustering of CTSS
clusterCTSS(object = myCAGEset, threshold = 1, thresholdIsTpm = TRUE,
nrPassThreshold = 1, method = "distclu", maxDist = 20,
removeSingletons = TRUE, keepSingletonsAbove = 5)
countie = data.frame(consensusClustersTpm(myCAGEset))
head(countie)
require(ZebrafishDevelopmentalCAGE)
require(CAGEr)
# load data
data(ZebrafishSamples)
ZebrafishSamples$sample
myCAGEset <- importPublicData(source = "ZebrafishDevelopment", dataset = "ZebrafishCAGE",
group = "development", sample = as.character(ZebrafishSamples$sample[c(3:4,11:12)] ) )
# get cTSS
getCTSS(myCAGEset)
myCAGEset
ctss = CTSStagCount(myCAGEset)
normalizeTagCount(myCAGEset, method = "none")
# Clustering of CTSS: low fidelity cTSSs are removed (each cluster with only one cTSS signal < 5).
clusterCTSS(object = myCAGEset, threshold = 1, thresholdIsTpm = TRUE,
nrPassThreshold = 1, method = "distclu", maxDist = 20,
removeSingletons = TRUE, keepSingletonsAbove = 5)
cumulativeCTSSdistribution(myCAGEset, clusters = "tagClusters")
quantilePositions(myCAGEset, clusters = "tagClusters", qLow = 0.1, qUp = 0.9)
myCAGEset
cumulativeCTSSdistribution(myCAGEset, clusters = "tagClusters")
rm(list = ls())
require(ZebrafishDevelopmentalCAGE)
require(CAGEr)
data(ZebrafishSamples)
as.character(ZebrafishSamples$sample)
myCAGEset <- importPublicData(source = "ZebrafishDevelopment", dataset = "ZebrafishCAGE",
group = "development", sample = as.character(ZebrafishSamples$sample[c(3:4,11:12)] ) )
# CTSS tag count
ctss = CTSStagCount(myCAGEset)
normalizeTagCount(myCAGEset, method = "none")
clusterCTSS(object = myCAGEset, threshold = 1, thresholdIsTpm = TRUE,
nrPassThreshold = 1, method = "distclu", maxDist = 20,
removeSingletons = TRUE, keepSingletonsAbove = 5)
cumulativeCTSSdistribution(myCAGEset, clusters = "tagClusters")
quantilePositions(myCAGEset, clusters = "tagClusters", qLow = 0.1, qUp = 0.9)
aggregateTagClusters(myCAGEset, tpmThreshold = 5, qLow = 0.1, qUp = 0.9, maxDist = 100)
save(myCAGEset, file = "AggregatedTagClus_0109_4Samples.RData")
rm(myCAGEset)
load("AggregatedTagClus_0109_4Samples.RData")
ls()
myCAGEset
countie = data.frame(consensusClustersTpm(myCAGEset))
head(countie)
cinfo <- consensusClusters(myCAGEset)
count.matrix <- matrix(consensusClustersTpm(myCAGEset))
head(count.matrix)
count.matrix <- as.matrix(consensusClustersTpm(myCAGEset))
head(count.matrix)
str(count.matrix)
consensus.info <- consensusClusters(myCAGEset)
head(consensus.info)
countData = as.matrix(countie)
# load in count table
countData = as.matrix(countie)
data(ZebrafishSamples)
head(count.matrix)
load("AggregatedTagClus_0109_4Samples.RData")
# create count tpm matrix per consensus cluster for each sample
count.matrix <- as.matrix(consensusClustersTpm(myCAGEset))
# package
require(CAGEr)
# load the data produced by the code above
load("AggregatedTagClus_0109_4Samples.RData")
# create count tpm matrix per consensus cluster for each sample
count.matrix <- as.matrix(consensusClustersTpm(myCAGEset))
# and the consensus coordinates (same order)
consensus.info <- consensusClusters(myCAGEset)
head(count.matrix)
colData <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
colData
info.matrix <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
require(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = count.matrix, colData = info.df, design = ~ condition)
```{r, message = FALSE}
info.df <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
browseVignettes("DESeq2")
# package
require(CAGEr)
# load the data produced by the code above
load("AggregatedTagClus_0109_4Samples.RData")
# create count tpm matrix per consensus cluster for each sample
count.matrix <- as.matrix(consensusClustersTpm(myCAGEset))
# and the consensus coordinates (same order)
consensus.info <- consensusClusters(myCAGEset)
head(count.matrix)
count.df <- data.frame(consensusClustersTpm(myCAGEset))
count.matrix <- matrix(count.df)
head(count.matrix)
head(count.df)
count.matrix <- as.matrix(count.df)
head(count.matrix)
info.df <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
info.df <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
```{r, echo = TRUE}
colnames(count.matrix)
info.df
info.df <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
info.df <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
count.matrix <- as.matrix(count.df)
head(count.matrix)
info.df <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
info.df <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
info.df <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
browseVignettes("DESeq2")
# package
require(CAGEr)
# load the data produced by the code above
load("AggregatedTagClus_0109_4Samples.RData")
# create count tpm matrix per consensus cluster for each sample
count.df <- data.frame(consensusClustersTpm(myCAGEset))
# and the consensus coordinates (same order)
consensus.info <- consensusClusters(myCAGEset)
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
info.df <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
info.df
```{r, echo=TRUE}
browseVignettes("DESeq2")
# package
require(CAGEr)
# load the data produced by the code above
load("AggregatedTagClus_0109_4Samples.RData")
# create count tpm matrix per consensus cluster for each sample
count.df <- data.frame(consensusClustersTpm(myCAGEset))
# and the consensus coordinates (same order)
consensus.info <- consensusClusters(myCAGEset)
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
info.df <- data.frame(condition=factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
names(count.matrix)
info.df <- data.frame( condition = factor(c("early", "early", "late", "late")), row.names = col.names(count.matrix))
info.df <- data.frame( condition = factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
info.df
# the condition for the analysis
info.df <- data.frame( condition = factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
head(info.df)
# the condition for the analysis
info.df <- data.frame( condition = factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
head(info.df)
# the condition for the analysis
info.df <- data.frame( condition = factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
head(info.df)
info.df <- data.frame( condition = factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
head(info.df)
info.df <- data.frame( condition = factor(c("early", "early", "late", "late")), row.names = colnames(count.matrix))
# the condition for the analysis
info.df <- data.frame( condition = factor(c("early", "early", "late", "late")), row.names = colnames(count.df))
# the condition for the analysis
samples <- colnames(count.matrix)
# Differential expression
count.matrix <- as.matrix(count.df)
# package
require(CAGEr)
# load the data produced by the code above
load("AggregatedTagClus_0109_4Samples.RData")
# create count tpm matrix per consensus cluster for each sample
count.df <- data.frame(consensusClustersTpm(myCAGEset))
# and the consensus coordinates (same order)
consensus.info <- consensusClusters(myCAGEset)
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
info.df
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
head(info.df)
# Differential expression
count.matrix <- as.matrix(count.df)
rm(list = ls())
ls()
browseVignettes("DESeq2")
# package
require(CAGEr)
# load the data produced by the code above
load("AggregatedTagClus_0109_4Samples.RData")
# create count tpm matrix per consensus cluster for each sample
count.df <- data.frame(consensusClustersTpm(myCAGEset))
# and the consensus coordinates (same order)
consensus.info <- consensusClusters(myCAGEset)
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
head(info.df)
browseVignettes("DESeq2")
# package
require(CAGEr)
# load the data produced by the code above
load("AggregatedTagClus_0109_4Samples.RData")
# create count tpm matrix per consensus cluster for each sample
count.df <- data.frame(consensusClustersTpm(myCAGEset))
# and the consensus coordinates (same order)
consensus.info <- consensusClusters(myCAGEset)
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
head(info.df)
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
head(as.matrix(info.df))
count.matrix <- as.matrix(count.df)
count.matrix <- as.matrix(count.df)
head(count.matrix)
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
head(as.matrix(info.df))
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
info.df[,1]
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
info.df
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
info.df
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
kable(info.df)
require(knitr)
kable(info.df)
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
kable(info.df)
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(c("early", "early", "late", "late")), row.names = samples)
dds <- DESeqDataSetFromMatrix(countData = count.matrix, colData = info.df, design = ~ condition)
require(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = count.matrix, colData = info.df, design = ~ condition)
require(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = count.matrix, colData = info.df, design = ~ condition)
?factor
# Differential expression
count.matrix <- as.matrix(count.df)
head(count.matrix)
# the condition for the analysis
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(x = c("early", "early", "late", "late"), levels = c("early","late")), row.names = samples)
head(count.df)
head(consensus.info)
count.consensus.info <- cbind(consensus.info[,-1], count.df)
head(count.consensus.info)
ls()
str(first_time)
first_time
rm(myCAGEset, samples, consensus.info)
str(dds)
# package
require(CAGEr)
# load the data produced by the code above
load("AggregatedTagClus_0109_4Samples.RData")
# package
require(CAGEr)
# load the data produced by the code above
load("Data/provided_data/AggregatedTagClus_0109_4Samples.RData")
# create count tpm matrix per consensus cluster for each sample
count.df <- data.frame(consensusClustersTpm(myCAGEset))
# and the consensus coordinates (same order)
consensus.info <- consensusClusters(myCAGEset)
# save the combined info and count tpm as intermediate files
# the order is the same so we can easily use cbind
count.consensus.info <- cbind(consensus.info[,-1], count.df)
write.table(count.consensus.info, "Data/intermediate_data/CountTable_Consensus_4Samples.txt", col.names = TRUE, row.names = FALSE, sep = "\t", quote = FALSE)
# remove unnecessary files
rm(myCAGEset, samples, consensus.info)
require(CAGEr)
# load the data produced by the code above
load("Data/provided_data/AggregatedTagClus_0109_4Samples.RData")
# create count tpm matrix per consensus cluster for each sample
count.df <- data.frame(consensusClustersTpm(myCAGEset))
# and the consensus coordinates (same order)
consensus.info <- consensusClusters(myCAGEset)
# save the combined info and count tpm as intermediate files
# the order is the same so we can easily use cbind
count.consensus.info <- cbind(consensus.info[,-1], count.df)
write.table(count.consensus.info, "Data/intermediate_data/CountTable_Consensus_4Samples.txt", col.names = TRUE, row.names = FALSE, sep = "\t", quote = FALSE)
head(count.consensus.info)
colnames(count.consensus.info)
dds <- DESeq(dds)
results(dds)
# the analysis
dds <- DESeq(dds)
# results
results(dds)
# the analysis
dds <- DESeq(dds)
# results
res <- results(dds)
res
resOrdered <- res[order(res$padj),]
summary(res)
sum(res$padj < 0.05, na.rm=TRUE)
head(resOrdered)
?runif
pvals = runif(nrow(count.matrix))
head(pvals)
range(pvals)
plot(-log10(resOrdered$padj), -log10(pvals[order(pvals)]))
abline(0,1)
plot(-log10(pvals[order(pvals)]), -log10(resOrdered$padj) )
abline(0,1)
require(qvalue)
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
install.packages("pheatmap")
require(pheatmap)
consensus.info$cons_clus_id <- paste("cid_",1:nrow(consensus.info), sep = "")
count.consensus.info <- cbind(consensus.info[,-1], count.df)
write.table(count.consensus.info, "Data/intermediate_data/CountTable_Consensus_4Samples.txt", col.names = TRUE, row.names = FALSE, sep = "\t", quote = FALSE)
head(count.consensus.info)
rownames(count.df) <- consensus.info$cons_clus_id
count.matrix <- as.matrix(count.df) # if from previously saved file:
head(count.matrix)
# DESeq2 expects a matrix of count table:
count.matrix <- as.matrix(count.df) # if from previously saved file: as.matrix(count.consensus.info[,7:10])
head(count.matrix)
# the condition for the analysis in data.frame:
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(x = c("early", "early", "late", "late"), levels = c("early","late")), row.names = samples)
samples <- colnames(count.matrix)
info.df <- data.frame(condition = factor(x = c("early", "early", "late", "late"), levels = c("early","late")), row.names = samples)
require(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = count.matrix, colData = info.df, design = ~ condition)
# the analysis
dds <- DESeq(dds)
# results
res <- results(dds)
res
resOrdered
# the analysis
dds <- DESeq(dds)
# results
res <- results(dds)
sum(res$padj < 0.05, na.rm=TRUE)
summary(res)
str(res)
head(resOrdered@listData)
test = as.data.frame(resOrdered)
head(test)
# package
require(CAGEr)
# load the data produced by the code above
load("Data/provided_data/AggregatedTagClus_0109_4Samples.RData")
# create count tpm matrix per consensus cluster for each sample
count.df <- data.frame(consensusClustersTpm(myCAGEset))
# and the consensus coordinates (same order)
consensus.info <- consensusClusters(myCAGEset)
# create identifiers to link back
consensus.info$cons_clus_id <- paste("cid_",1:nrow(consensus.info), sep = "")
rownames(count.df) <- consensus.info$cons_clus_id
# save the combined info and count tpm as intermediate files
# the order is the same so we can easily use cbind
count.consensus.info <- cbind(consensus.info[,-1], count.df)
write.table(count.consensus.info, "Data/intermediate_data/CountTable_Consensus_4Samples.txt", col.names = TRUE, row.names = FALSE, sep = "\t", quote = FALSE)
# remove unnecessary files
rm(myCAGEset, samples, consensus.info)
resOrdered$cons_clus_id <- resOrdered@rownames
resOrdered
result <- as.data.frame(resOrdered)
write.table(result, "Data/intermediate_data/DiffExpression_Consensus_4Samples.txt", col.names = TRUE, row.names = FALSE, quote = FALSE, sep = "\t")
head(result)
# First add the cons_clus_id for identification
resOrdered$cons_clus_id <- resOrdered@rownames
# Dataframe for downstream
result <- as.data.frame(resOrdered)
# save as intermediate file
write.table(result, "Data/intermediate_data/DiffExpression_Consensus_4Samples.txt", col.names = TRUE, row.names = FALSE, quote = FALSE, sep = "\t")
# remove previous files
rm(res, resOrdered)
rld <- rlog(dds, blind=FALSE)
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld$condition, rld$type, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
require(RColorBrewer)
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix, clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,col=colors)
pheatmap(sampleDistMatrix, clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,col=colors)
pheatmap(sampleDistMatrix, clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,col=colors)
pheatmap(sampleDistMatrix, clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,col=colors)
rownames(sampleDistMatrix) <- rld$condition
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix, clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,col=colors)
# package
require(RColorBrewer)
require(pheatmap)
# Extracting transformed values:
rld <- rlog(dds, blind=FALSE)
# heatmap
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- rld$condition
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix, clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,col=colors)
pheatmap(sampleDistMatrix, clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,col=colors)
pheatmap(scale(sampleDistMatrix), clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,col=colors)
require(GenomicFeatures)
txdb <- makeTxDbFromUCSC("danRer7", "ensGene")
require(GenomicFeatures)
txdb <- makeTxDbFromUCSC("danRer7", "ensGene")
quire(GenomicFeatures)
save(txdb, file = "Data/provided_data/txdb_DanRer7.RData")
txdb
rm(txdb)
load("Data/provided_data/txdb_DanRer7.RData")
txdb
library(AnnotationDbi)
txdb<-loadDb("Zv9_transcriptome.sqlite")
library(AnnotationDbi)
txdb<-loadDb("Data/provided_data/Zv9_transcriptome.sqlite")
txdb
require(GenomicFeatures)
require(AnnotationDbi)
txdb <- makeTxDbFromUCSC("danRer7", "ensGene")
?saveDb
saveDb(txdb, file = "Data/provided_data/txdb_DanRer7.sqlite")
rm(txdb)
loadDb("Data/provided_data/txdb_DanRer7.sqlite")
txdb
ls()
txdb <- loadDb("Data/provided_data/txdb_DanRer7.sqlite")
ls()
txdb
promoters = trim(promoters(txdb, upstream=500, downstream=500))
# 5 kb upstream - 500bp
upstream = trim(flank(promoters, 5000))
# exons
exons <- exons(txdb)
# introns
introns = intronsByTranscript(txdb)
# genes
gene = genes(txdb)
gene
require(GenomicFeatures)
require(AnnotationDbi)
txdb <- loadDb("..Data/provided_data/txdb_DanRer7.sqlite")
browseVignettes("DESeq2")
# package
require(CAGEr)
# load the data produced by the code above
load("../Data/provided_data/AggregatedTagClus_0109_4Samples.RData")
require(CAGEr)
load("../Data/provided_data/AggregatedTagClus_0109_4Samples.RData")
getwd()
