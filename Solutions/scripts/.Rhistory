require(CAGEr)
install.packages("ZebrafishDevelopmentalCAGE")
sessionInfo()
install.packages("ZebrafishDevelopmentalCAGE ")
install.packages("ZebrafishDevelopmentalCAGE")
require(CAGEr)
install.packages("ZebrafishDevelopmentalCAGE")
source("~/Downloads/ZebrafishDevelopmentalCAGE")
require("~/Downloads/ZebrafishDevelopmentalCAGE")
require(ZebrafishDevelopmentalCAGE, lib.oc = "~/Downloads")
require(ZebrafishDevelopmentalCAGE, lib.loc = "~/Downloads")
require(CAGEr)
load("~/Documents/ZebrafishCageData_Nepal/data/ZebrafishSamples.RData")
ZebrafishSamples
load("~/Documents/ZebrafishCageData_Nepal/data/ZebrafishCAGE.RData")
head(ZebrafishCAGE$development)
library(BSgenome.Drerio.UCSC.danRer7)
sessionInfo()
source('~/.active-rstudio-document')
source("https://bioconductor.org/biocLite.R")
biocLite()                  ## R version 3.0 or later
require(heatmaps)
library(GenomicRanges)
cage = read.table(system.file("extdata", "zf_proms.txt", package="heatmaps"), header=TRUE)
cgi = read.table(system.file("extdata", "zf_cgi.txt", package="heatmaps"), header=TRUE)
library(BSgenome.Drerio.UCSC.danRer7)
cage_gr = makeGRangesFromDataFrame(cage, keep.extra.columns=TRUE, seqinfo=seqinfo(Drerio))
cage_gr = cage_gr[order(cage_gr$interquantileWidth)]
windows = promoters(cage_gr, 500, 500)
cgi_gr = makeGRangesFromDataFrame(cgi, keep.extra.columns=TRUE, seqinfo=seqinfo(Drerio))
cov_rle = coverage(cgi_gr, weight="obsExp")
coverage_hm = CoverageHeatmap(windows, cov_rle, coords=c(-500, 500), label="CGI")
scale(coverage_hm) = c(0, 2)
par(mai=c(0.6, 0.3, 0.1, 0.3))
plotHeatmap(coverage_hm, color="YlOrRd")
source("https://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
biocLite()                  ## R version 3.0 or later
library(GenomicRanges)
cage = read.table(system.file("extdata", "zf_proms.txt", package="heatmaps"), header=TRUE)
cgi = read.table(system.file("extdata", "zf_cgi.txt", package="heatmaps"), header=TRUE)
library(BSgenome.Drerio.UCSC.danRer7)
cage_gr = makeGRangesFromDataFrame(cage, keep.extra.columns=TRUE, seqinfo=seqinfo(Drerio))
cage_gr = cage_gr[order(cage_gr$interquantileWidth)]
windows = promoters(cage_gr, 500, 500)
cgi_gr = makeGRangesFromDataFrame(cgi, keep.extra.columns=TRUE, seqinfo=seqinfo(Drerio))
cov_rle = coverage(cgi_gr, weight="obsExp")
coverage_hm = CoverageHeatmap(windows, cov_rle, coords=c(-500, 500), label="CGI")
scale(coverage_hm) = c(0, 2)
par(mai=c(0.6, 0.3, 0.1, 0.3))
plotHeatmap(coverage_hm, color="YlOrRd")
###### Mat vs Zyg start site ########
require(plyr)
require(reshape2)
require(ggplot2)
require(devtools)
require(EBImage)
require(heatmaps)
require(IRanges)
require(GenomicRanges)
require(RColorBrewer)
library(BSgenome.Drerio.UCSC.danRer7)
yay = "~/Documents/promoter_architecture/ExpressionSelection/Results/cat_cell_spec/Cat_housekeeping_shift_"
co = read.table(paste(yay,"combinedInfoWithShift_2016_Nov28.txt", sep = ""), head = TRUE, sep = "\t")
site = "maternal_"
## shift in bp (zyg dom - mat dom | plus strand)(zyg mat - zyg dom | neg strand)
co$shift_in_bp = ifelse(co$strand == "+", co$posDomTSS.1.y - co$posDomTSS.1.x,
co$posDomTSS.1.x - co$posDomTSS.1.y)
cgi = read.table("~/Documents/Annotations/danRer7/danRer7_CGI", head = FALSE, sep = "\t")
cgi = cgi[,-1]
cgi = cgi[grep("chr", cgi$V2),]
colnames(cgi) = c("chrom","chromStart","chromEnd","name","length","cpgNum","gcNum","perCpg","perGc","obsExp")
cgi_gr = GRanges(seqnames = cgi$chrom,
ranges = IRanges(start = cgi$chromStart,
end = cgi$chromEnd),
seqlengths = seqlengths(Drerio))
values(cgi_gr) <- cbind(values(cgi_gr), cgi[,4:ncol(cgi)])
cov_rle = coverage(cgi_gr, weight="obsExp")
?coverage
cgi
cgi_gr
values(cgi_gr) <- cbind(values(cgi_gr), cgi[,4:ncol(cgi)])
cov_rle = coverage(cgi_gr, weight="perCpg")
cage_gr <- GRanges(seqnames = co$chr,
ranges = IRanges(start = co$posDomTSS.1.x,
end = co$posDomTSS.1.x),
strand = co$strand,
seqlengths = seqlengths(Drerio))
values(cage_gr) <- cbind(values(cage_gr), com[,6:ncol(com)])
windows = trim(promoters(cage_gr, 500, 500))
tes = which(windows@ranges@width == 1000) # filter out the trimmed seqs
com = co[tes,]
windows = windows[tes]
cage_gr <- GRanges(seqnames = co$chr,
ranges = IRanges(start = co$posDomTSS.1.x,
end = co$posDomTSS.1.x),
strand = co$strand,
seqlengths = seqlengths(Drerio))
values(cage_gr) <- cbind(values(cage_gr), co[,6:ncol(co)])
windows = trim(promoters(cage_gr, 500, 500))
tes = which(windows@ranges@width == 1000) # filter out the trimmed seqs
com = co[tes,]
windows = windows[tes]
par(mfrow=c(1,4))
t = order(com$clus.n.x, -com$shift_in_bp, decreasing = FALSE)
l = length(unique(com$clus.n.x))
win = windows[t]
info = com[t,]
coverage_hm = CoverageHeatmap(win, cov_rle, coords=c(-500, 500), label="CGI - clus shift")
plotHeatmap(smooth(coverage_hm), color="PRGn")
?scale
coverage_hm = CoverageHeatmap(win, cov_rle, coords=c(-500, 500), label="CGI - clus shift")
scale(coverage_hm) = c(0, 100)
plotHeatmap(coverage_hm, color="PRGn")
for(i in 1:l){
abline(nrow(com)-length(which(com$clus.n.x %in% (seq(1,i)))),0,pch=25, lwd=2)
}
cgi = read.table("~/Documents/Annotations/danRer7/danRer7_CGI", head = FALSE, sep = "\t")
cgi = cgi[,-1]
cgi = cgi[grep("chr", cgi$V2),]
colnames(cgi) = c("chrom","chromStart","chromEnd","name","length","cpgNum","gcNum","perCpg","perGc","obsExp")
cgi_gr = GRanges(seqnames = cgi$chrom,
ranges = IRanges(start = cgi$chromStart,
end = cgi$chromEnd),
seqlengths = seqlengths(Drerio))
values(cgi_gr) <- cbind(values(cgi_gr), cgi[,4:ncol(cgi)])
cov_rle = coverage(cgi_gr, weight="perCpg")
cage_gr <- GRanges(seqnames = co$chr,
ranges = IRanges(start = co$posDomTSS.1.x,
end = co$posDomTSS.1.x),
strand = co$strand,
seqlengths = seqlengths(Drerio))
values(cage_gr) <- cbind(values(cage_gr), co[,6:ncol(co)])
dfcgi = as.data.frame(subsetByOverlaps(cage_gr,cgi_gr))
head(dfcgi)
head(dfcgi)
head(dfcgi,1
)
length(unique(dfcgi$id.x))
head(co,1)
colnames(co)
head(co,1)
head(dfcgi,2)
cgi_gr
dfcgi = as.data.frame(subsetByOverlaps(cage_gr,cgi_gr))
head(dfcgi,1)
dfcgi = as.data.frame(mergeByOverlaps(cage_gr,cgi_gr))
head(dfcgi,1)
colnames(dfcgi)
all = merge(co[,c(1:16,18:20)], dfcgi[,c(19,66:84)])
head(co,1)
all = merge(co[,c(1:16,18:20)], dfcgi[,c(19,66:84)], by.x = "id.x", by.y = "cage_gr.id.x", all.x = TRUE)
head(all,2)
all$cgi = ifelse(is.na(all$obsExp), "no", "yes" )
table(all$cgi)
table(all$clus.n.x, all$cgi)
dfr = data.frame(t(table(all$clus.n.x, all$cgi))))
dfr = data.frame(t(table(all$clus.n.x, all$cgi)))
dfr
print( ggplot(dfr, aes(Var2, Freq, fill = Var1)) +
geom_bar(position = "fill", stat = "identity") + xlab("NPLB clusters") + scale_fill_brewer(palette = "Set1") +
ggtitle("Two NPLB clus - Tag cluster DomTSS") + ylab("Proportion") +
theme(text = element_text(size=16),
panel.background=element_rect(fill = "white", colour = "black"), axis.text.x = element_text(angle = 45, hjust = 1)) )
print( ggplot(dfr, aes(Var2, Freq, fill = Var1)) +
geom_bar(position = "fill", stat = "identity") + xlab("NPLB clusters") + scale_fill_brewer(palette = "Set1") +
ggtitle("CGI overlap with TSS") + ylab("Proportion") +
theme(text = element_text(size=16),
panel.background=element_rect(fill = "white", colour = "black"), axis.text.x = element_text(angle = 45, hjust = 1)) )
getwd()
direc = "~/Documents/promoter_architecture/ExpressionSelection/Results/cat_cell_spec/zf_512cells/"
pdf(paste(direc, site, "CGIoverlapProportions.pdf",sep= ""))
print( ggplot(dfr, aes(Var2, Freq, fill = Var1)) +
geom_bar(position = "fill", stat = "identity") + xlab("NPLB clusters") + scale_fill_brewer(palette = "Set1") +
ggtitle("CGI overlap with TSS") + ylab("Proportion") +
theme(text = element_text(size=16),
panel.background=element_rect(fill = "white", colour = "black"), axis.text.x = element_text(angle = 45, hjust = 1)) )
dev.off()
tataa = trim(promoters(cage_gr, 35, -22))
tata.start = ifelse(co$strand == "+", co$posDomTSS.1.x - 35, co$posDomTSS.1.x + 35)
head(tata.start)
head(co,2)
co[1:10,1:16]
head(tata.start)
tata.start = ifelse(co$strand == "+", co$posDomTSS.1.x - 35, co$posDomTSS.1.x + 22)
tata.end = ifelse(co$strand == "+", co$posDomTSS.1.x - 22, co$posDomTSS.1.x + 35)
tataa = GRanges(seqnames = co$chr,
ranges = IRanges(start = tata.start,
end = tata.end),
strand = co$strand,
seqlengths = seqlengths(Drerio))
tataa
length(tataa)
width(tataa)
tataa
tataaseq <- getSeq(Drerio, tataa)
writeXStringSet(tataaseq, paste(direc,site,"tataaSeq_14bp.fa", sep = ""))
names(tataaseq) = paste("id_",1:length(tataaseq))
writeXStringSet(tataaseq, paste(direc,site,"tataaSeq_14bp.fa", sep = ""))
paste("id_",1:length(tataaseq))
names(tataaseq) = paste("id_",1:length(tataaseq), sep = "")
writeXStringSet(tataaseq, paste(direc,site,"tataaSeq_14bp.fa", sep = ""))
cgi <- read_delim("~/Documents/Annotations/danRer7/CpG.prediction.Christopher.UCSC.track.bed",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
colnames(cgi) = c("seqnames", "start", "end", "id", "score", "strand")
cgiR = as(object=cgi, Class="GRanges")
install.packages(readr)
install.packages("readr")
require(readr)
cgi <- read_delim("~/Documents/Annotations/danRer7/CpG.prediction.Christopher.UCSC.track.bed",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
colnames(cgi) = c("seqnames", "start", "end", "id", "score", "strand")
cgiR = as(object=cgi, Class="GRanges")
cgiR
require(CAGEr)
# load the data produced by the code above
load("../Data/provided_data/AggregatedTagClus_0109_4Samples.RData")
browseVignettes("DESeq2")
# package
require(CAGEr)
# load the data produced by the code above
load("../Data/provided_data/AggregatedTagClus_0109_4Samples.RData")
getwd()
browseVignettes("DESeq2")
# package
require(CAGEr)
# load the data produced by the code above
load("../Data/provided_data/AggregatedTagClus_0109_4Samples.RData")
# package
require(CAGEr)
# load the data produced by the code above
load("../Data/provided_data/AggregatedTagClus_0109_4Samples.RData")
getwd()
setwd("~/Documents/workshop/cage/scripts/")
load("../Data/provided_data/AggregatedTagClus_0109_4Samples.RData")
